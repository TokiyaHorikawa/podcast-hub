// Generated by ts-to-zod
import { z } from "zod";
import type { Json } from "./database.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const contentsRowSchema = z.object({
  body: z.string(),
  created_at: z.string(),
  id: z.number(),
  title: z.string(),
  userId: z.number().nullable(),
});

export const contentsInsertSchema = z.object({
  body: z.string(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  title: z.string(),
  userId: z.number().optional().nullable(),
});

export const contentsUpdateSchema = z.object({
  body: z.string().optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  title: z.string().optional(),
  userId: z.number().optional().nullable(),
});

export const contentsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("contents_userId_fkey"),
    columns: z.tuple([z.literal("userId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const episodesRowSchema = z.object({
  created_at: z.string(),
  description: z.string(),
  id: z.number(),
  podcastId: z.number(),
  title: z.string(),
});

export const episodesInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string(),
  id: z.number().optional(),
  podcastId: z.number(),
  title: z.string(),
});

export const episodesUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional(),
  id: z.number().optional(),
  podcastId: z.number().optional(),
  title: z.string().optional(),
});

export const episodesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("episodes_podcastId_fkey"),
    columns: z.tuple([z.literal("podcastId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("podcasts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const podcastsRowSchema = z.object({
  created_at: z.string(),
  description: z.string(),
  id: z.number(),
  title: z.string(),
  userId: z.number(),
});

export const podcastsInsertSchema = z.object({
  created_at: z.string().optional(),
  description: z.string(),
  id: z.number().optional(),
  title: z.string(),
  userId: z.number(),
});

export const podcastsUpdateSchema = z.object({
  created_at: z.string().optional(),
  description: z.string().optional(),
  id: z.number().optional(),
  title: z.string().optional(),
  userId: z.number().optional(),
});

export const podcastsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("podcasts_userId_fkey"),
    columns: z.tuple([z.literal("userId")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("users"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const usersRowSchema = z.object({
  created_at: z.string(),
  email: z.string().nullable(),
  id: z.number(),
  isAdmin: z.boolean().nullable(),
  name: z.string(),
  uid: z.string().nullable(),
});

export const usersInsertSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional().nullable(),
  id: z.number().optional(),
  isAdmin: z.boolean().optional().nullable(),
  name: z.string(),
  uid: z.string().optional().nullable(),
});

export const usersUpdateSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional().nullable(),
  id: z.number().optional(),
  isAdmin: z.boolean().optional().nullable(),
  name: z.string().optional(),
  uid: z.string().optional().nullable(),
});

export const usersRelationshipsSchema = z.tuple([]);
